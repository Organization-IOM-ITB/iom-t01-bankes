generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@postgres:5432/db"
}

model User {
  user_id  Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String?
  role     Role

  Students               Student[]
  NotificationEndpoints  NotificationEndpoint[]
  Notifications          Notification[]
  ParticipatedInterviews InterviewParticipant[]
  InterviewSlots         InterviewSlot[]
}

model Student {
  student_id Int    @id @default(autoincrement())
  nim        String
  faculty    String
  major      String

  Files          File[]
  Statuses       Status[]
  InterviewSlots InterviewSlot[]

  User        User          @relation(fields: [student_id], references: [user_id], onDelete: Cascade)
  notes       Notes[]
  ScoreMatrix ScoreMatrix[]
}

model File {
  file_id    Int      @id @default(autoincrement())
  student_id Int
  file_url   String
  file_name  String
  type       FileType

  Student Student @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
}

model Status {
  student_id    Int
  period_id     Int
  passDitmawa   Boolean
  passIOM       Boolean
  passInterview Boolean
  amount        Int?

  Student Student @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  Period  Period  @relation(fields: [period_id], references: [period_id], onDelete: Cascade)

  @@id([student_id, period_id])
}

enum ScoreCategory {
  KURANG
  CUKUP
  BAIK
}

model Questions {
  question_id   Int            @id @default(autoincrement())
  question      String
  ScoreMatrices ScoreMatrix[]
}

model ScoreMatrix {
  student_id     Int
  period_id      Int
  question_id    Int
  score_category ScoreCategory
  comment        String

  Student  Student   @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  Period   Period    @relation(fields: [period_id], references: [period_id], onDelete: Cascade)
  Question Questions @relation(fields: [question_id], references: [question_id], onDelete: Cascade)

  @@id([student_id, period_id, question_id])
}

model Period {
  period_id    Int              @id @default(autoincrement())
  period       String
  start_date   DateTime
  end_date     DateTime
  is_current   Boolean
  is_open      Boolean

  Statuses      Status[]
  InterviewSlots InterviewSlot[]
  ScoreMatrix   ScoreMatrix[]
}

model Notes {
  slot_id    Int
  user_id    Int
  text       String

  slot    InterviewSlot @relation(fields: [slot_id], references: [id], onDelete: Cascade)
  student Student       @relation(fields: [user_id], references: [student_id], onDelete: Cascade)

  @@id([slot_id, user_id])
}

model InterviewParticipant {
  id        Int      @id @default(autoincrement())
  slot_id   Int
  user_id   Int
  joined_at DateTime @default(now())

  Slot InterviewSlot @relation(fields: [slot_id], references: [id], onDelete: Cascade)
  User User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([slot_id, user_id])
}

model InterviewSlot {
  id          Int       @id @default(autoincrement())
  title       String?
  description String?
  user_id     Int
  period_id   Int
  start_time  DateTime
  end_time    DateTime
  student_id  Int?
  booked_at   DateTime?

  Student      Student?            @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  User         User                @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  Period       Period              @relation(fields: [period_id], references: [period_id], onDelete: Cascade)
  Participants InterviewParticipant[]
  notes        Notes[]
}

model NotificationEndpoint {
  user_id   Int
  endpoint  String
  keys      Json
  createdAt DateTime @default(now())

  User User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, endpoint])
}

model Notification {
  notification_id Int      @id @default(autoincrement())
  user_id         Int
  header          String
  body            String
  url             String?
  has_read        Boolean  @default(false)
  created_at      DateTime @default(now())

  User User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
}

enum FileType {
  KTP
  CV
  Transkrip_Nilai
  Essay
  STNK
  SIM
}

enum Role {
  Admin
  Mahasiswa
  Guest
  Pengurus_IOM
  Pewawancara
}
